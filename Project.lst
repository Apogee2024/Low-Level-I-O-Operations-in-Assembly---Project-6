Microsoft (R) Macro Assembler Version 14.29.30154.0	    06/12/24 15:34:58
Project_6 (Proj6_bradsean.asm				     Page 1 - 1


				TITLE Project_6 (Proj6_bradsean.asm)

				; Author:		 Sean Brady
				; Last Modified: 6/9/2024
				; OSU email address: bradsean@oregonstate.edu
				; Course number/section:   CS271 Section 1
				; Project Number: 6        Due Date: 6/9/2024
				; Description: This program takes 10 numbers as input from the user and takes the string and converts it to it's numeric equivalent.  
				; It checks that the input fits within an SDWORD and that the input it valid.
				; It then stores that number in the correct positiion in the array. It then displays the array.
				; It displays a running total of the numbered entered. Finally, it shows the average of the numbers entered and says bye

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				; Gets a string from a the user and stores it.
				;
				; Preconditions: do not use EDX, ECX, EDI, ESI as arguments
				; Returns:  the mInput buffer contains the string that was entered, 
				; mCharsRead contains the number of characters read.
				;
				; Receives:
				; mPromptOffset = prompt address offset
				; mMaxChar =  number of the maximum number of character it can receive
				; mInputBuffer = offset for the buffer of the characters to be stored
				; mCharsRead = offset for the number of characters read
				; ---------------------------------------------------------------------------------
				mGetString	MACRO    mPromptOffset:REQ ,mMaxChar:REQ ,mInputBuffer:REQ ,mCharsRead:REQ 

				; iokn bpreserve registers
					push  EDX						; offset for the prompt
					push  ECX						; maximum numbers of characteres that can be read
				    mov   EDX, mPromptOffset		; prompt offset was pushed before calling proc

				; write the prompt for the string to the screen
					call  WriteString
					push  ESI						; used for string primitives
					
					push  EDI						; used as destination address for input buffer
					mov   ECX, mMaxChar 
					push  EAX
					

					mov   ESI, mCharsRead			; setup address to  store number of bytes read
					mov   EAX, 0					; sto takes value of AL, so mov 0 into it
				; clear the buffer before copying more data into it!
					mov   EDI, mInputBuffer
					rep   stosb						
					mov   EDX, mInputBuffer			; move offset of inputBuffer into EDX
					mov   ECX, mMaxChar				; set max # of characters
					call  ReadString
				; store the number of bytes read
					mov   [ESI],EAX					
				; cleanup	
					pop   EAX
					pop	  EDI
					pop   ESI
					pop   ECX
					pop   EDX				
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDispString
				;
				; displays the string at the given offset
				;
				; Preconditions: do not use EDX as an argument
				; Postconditions: the string has been written to the screen
				;
				; Receives: mStringOffset = string's address for the string to be displayed
				; 
				; ---------------------------------------------------------------------------------
				mDispString  MACRO	mStringOffset:REQ 

				;preserve registers
					push  EDX		
					mov   EDX, mStringOffset 
					call  WriteString

				;restore registers
					pop   EDX		
				ENDM

 00000000			.data
 00000000  0000000A [		numArray    SDWORD	10 DUP(0)
	    00000000
	   ]
 00000028  000000C8 [		numStrArray BYTE    200 DUP(0)
	    00
	   ]
 000000F0  0000000A [		charsInANum DWORD   10 DUP(0)
	    00000000
	   ]
 00000118 00000014		maxChar		DWORD   20
 0000011C 00000000		valNumCount	DWORD	0			     ; the number of valid numbers entered
 00000120 50 72 6F 6A 65	progTitle	BYTE    "Project 6: Designing low-level I/O procedures",13,10, 
	   63 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 3A 20 20
	   53 65 61 6E 20
	   42 72 61 64 79
	   20 20 7E 28 5C
	   5E 5F 5E 29 7E
	   0D 0A 0D 0A 00
									"Written by:  Sean Brady  ~(\^_^)~",13,10,13,10,0 
 00000175 50 6C 65 61 73	promptOne	BYTE    "Please provide 10 signed decimal integers.",13,10,  
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0D 0A
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 0D 0A 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0D 0A 0D 0A 00
									"Each number needs to be small enough to fit inside a 32 bit register.",13,10,
									"After you have finished inputting the raw numbers I will display a",13,10,
									"list of the integers, their sum, and their average value.",13,10,13,10,0 
 0000026A 50 6C 65 61 73	numPrompt	BYTE    "Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000289 45 52 52 4F 52	numError    BYTE	"ERROR: You did not enter a signed number or your number was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
 000002D0 50 6C 65 61 73	tryAgain	BYTE    "Please try again:             ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000002EF 2A 2A 45 43 3A	extraC1		BYTE    "**EC: Number each line of user input and display a running subtotal of the user's valid numbers.",13,10,
	   20 4E 75 6D 62
	   65 72 20 65 61
	   63 68 20 6C 69
	   6E 65 20 6F 66
	   20 75 73 65 72
	   20 69 6E 70 75
	   74 20 61 6E 64
	   20 64 69 73 70
	   6C 61 79 20 61
	   20 72 75 6E 6E
	   69 6E 67 20 73
	   75 62 74 6F 74
	   61 6C 20 6F 66
	   20 74 68 65 20
	   75 73 65 72 27
	   73 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   2E 0D 0A 54 68
	   65 73 65 20 64
	   69 73 70 6C 61
	   79 73 20 6D 75
	   73 74 20 75 73
	   65 20 57 72 69
	   74 65 56 61 6C
	   2E 20 28 31 20
	   70 74 29 0D 0A
	   0D 0A 00
									"These displays must use WriteVal. (1 pt)",13,10,13,10,0
 0000037E 59 6F 75 20 65	numArrDisp	BYTE    "You entered the following numbers: ",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 000003A4 54 68 65 20 73	sumDisp		BYTE    "The sum of these numbers is:    ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 20
	   20 20 00
 000003C5 54 68 65 20 74	averageDisp BYTE    "The truncated average is:     ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 20 20 20 20
	   00
 000003E4 00000001		lineNum     SDWORD  1
 000003E8 54 68 61 6E 6B	finalBye	BYTE    "Thank you! It was a super fun class and a great quarter. I hope our paths cross again someday",13,10,
	   20 79 6F 75 21
	   20 49 74 20 77
	   61 73 20 61 20
	   73 75 70 65 72
	   20 66 75 6E 20
	   63 6C 61 73 73
	   20 61 6E 64 20
	   61 20 67 72 65
	   61 74 20 71 75
	   61 72 74 65 72
	   2E 20 49 20 68
	   6F 70 65 20 6F
	   75 72 20 70 61
	   74 68 73 20 63
	   72 6F 73 73 20
	   61 67 61 69 6E
	   20 73 6F 6D 65
	   64 61 79 0D 0A
	   75 6E 74 69 6C
	   20 74 68 65 6E
	   2C 20 68 61 76
	   65 20 61 20 67
	   72 65 61 74 20
	   64 61 79 21 00
									"until then, have a great day!",0

 00000000			.code
 00000000			main PROC

				; display the program title
					mDispString offset progTitle     
 00000000  52		     1		push  EDX		
 00000001  BA 00000120 R     1		mov   EDX, offset progTitle 
 00000006  E8 00000000 E     1		call  WriteString
 0000000B  5A		     1		pop   EDX		

				; display instructions for the user
					mDispString offset promptOne	 
 0000000C  52		     1		push  EDX		
 0000000D  BA 00000175 R     1		mov   EDX, offset promptOne 
 00000012  E8 00000000 E     1		call  WriteString
 00000017  5A		     1		pop   EDX		

				; display extraCredit Attempt Description
					mDispString offset extraC1		 
 00000018  52		     1		push  EDX		
 00000019  BA 000002EF R     1		mov   EDX, offset extraC1 
 0000001E  E8 00000000 E     1		call  WriteString
 00000023  5A		     1		pop   EDX		
					
 00000024  51				push  ECX
 00000025  B9 0000000A			mov   ECX, 10					 ; initialize to get 10 numbers

 0000002A			_getNumbersLoop:

				; get numbers from the user
 0000002A  68 000002D0 R		push  offset tryAgain
 0000002F  68 000003E4 R		push  offset lineNum
 00000034  68 00000289 R		push  offset numError
 00000039  FF 35 00000118 R		push  maxChar
 0000003F  68 0000026A R		push  offset numPrompt			
 00000044  68 00000000 R		push  offset numArray
 00000049  FF 35 0000011C R		push  valNumCount
 0000004F  E8 0000011C			call  ReadVal					
 00000054  FF 05 0000011C R		inc   valNumCount

				; display the running sum
 0000005A  E8 00000000 E		call  CrLf
 0000005F  68 000003A4 R		push  offset sumDisp			
 00000064  68 00000000 R		push  offset numArray
 00000069  FF 35 0000011C R		push  valNumCount
 0000006F  E8 000002C2			call  CalculateSumAndDisplay
 00000074  E8 00000000 E		call  CrLf
 00000079  E2 AF			loop  _getNumbersLoop

				; display the number array
 0000007B  E8 00000000 E		call  CrLf
 00000080  68 0000037E R		push  offset numArrDisp
 00000085  68 00000000 R		push  offset numArray			
 0000008A  FF 35 0000011C R		push  valNumCount
 00000090  E8 00000245			call  NumArrayDisplay

				; display the sum
 00000095  E8 00000000 E		call  CrLf
 0000009A  68 000003A4 R		push  offset sumDisp			
 0000009F  68 00000000 R		push  offset numArray
 000000A4  FF 35 0000011C R		push  valNumCount
 000000AA  E8 00000287			call  CalculateSumAndDisplay

				; display the average
 000000AF  E8 00000000 E		call  CrLf
 000000B4  68 000003C5 R		push  offset averageDisp		
 000000B9  68 00000000 R		push  offset numArray
 000000BE  FF 35 0000011C R		push  valNumCount
 000000C4  E8 000002B3			call  CalcAverageAndDisplay

				; say goodbye
 000000C9  E8 00000000 E		call  CrLf
					mDispString offset finalBye		
 000000CE  52		     1		push  EDX		
 000000CF  BA 000003E8 R     1		mov   EDX, offset finalBye 
 000000D4  E8 00000000 E     1		call  WriteString
 000000D9  5A		     1		pop   EDX		

 000000DA  E8 00000000 E		call  CrLf
					invoke ExitProcess,0
 000000DF  6A 00	   *	    push   +000000000h
 000000E1  E8 00000000 E   *	    call   ExitProcess

 000000E6			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Receives an SDWORD and by value, and converts it to a string of ASCII digits, reverses the items to display
				; in the correct order and then writes the digits.
				;
				; Preconditions: an number has been pushed to the stack
				;
				; Postconditions: the number pushed has been written to the screen.
				;
				; Receives:
				; [EBP+8] = A number as a value, SDWORD
				;
				; returns: none
				; ---------------------------------------------------------------------------------

 000000E6			WriteVal PROC

				;declare local variables
					LOCAL pInputBuffer[20]:BYTE		; used to store the reversed number string
					LOCAL pOutputBuffer[21]:BYTE	; used to display the number

				;preserve registers
 000000E6  55		   *	    push   ebp
 000000E7  8B EC	   *	    mov    ebp, esp
 000000E9  83 C4 D4	   *	    add    esp, 0FFFFFFD4h
 000000EC  57				push  EDI						 ; destination address to store character used in string primitive
 000000ED  51				push  ECX						 ; used a counter when reversing the string
 000000EE  50				push  EAX						 ; holds the value of the number
 000000EF  53				push  EBX						 ; used as a dividend
 000000F0  56				push  ESI						 ; will be used as a sign check / multiplier
 000000F1  BE 00000001			mov   ESI, 1

				; fill the buffer with 0's to prevent an error
 000000F6			_zeroFillTheBuffers:
 000000F6  B8 00000000			mov   EAX, 0
 000000FB  8D 7D EC			lea   EDI, pInputBuffer
 000000FE  B9 00000014			mov   ECX, 20                    ; fill the buffer with 0s for the next iteration!
 00000103  F3/ AA			rep   stosb
 00000105  8D 7D D7			lea   EDI, pOutputBuffer
 00000108  B9 00000015			mov   ECX,21
 0000010D  F3/ AA			rep   stosb

				; convert integer to ascii text
 0000010F			_setupConvertIntToAscii:
 0000010F  8B 45 08			mov   EAX, [EBP +8]				 ; EAX now holds value of sdword
 00000112  83 F8 00			cmp   EAX, 0
 00000115  79 08			jns   _divSetupCont				 ; check if the number is negative
 00000117  BE FFFFFFFF			mov   ESI, -1
 0000011C  0F AF C6			imul  EAX, ESI

				;continue setting up for division
 0000011F			_divSetupCont:
 0000011F  BB 0000000A			mov   EBX, 10
 00000124  8D 7D EC			lea   EDI, pInputBuffer			 ; where the output will be stored in reverse
 00000127  56				push  ESI			             ; store value of ESI for later!
 00000128  BE 00000000			mov   ESI, 0					 ; number of numbers for reversal loop later

				; convert number from decimal to into string
 0000012D			_convertLoop:
 0000012D  99				cdq		   					     ; sign extend eax into edx
 0000012E  F7 FB			idiv  EBX						 ; divide by 10
 00000130  50				push  EAX						 ; we need to use AL for stoSB so preserve
 00000131  8B C2			mov   EAX, EDX					 ; move remainder into EAX for storage
 00000133  04 30			add   AL, 48					 ; convert digit to ascii code
 00000135  AA				stosb							 ; store the contents of AL into the buffer, increment EDI
 00000136  58				pop   EAX						 ; restore EAX
 00000137  46				inc   ESI
 00000138  83 F8 00			cmp   EAX, 0					 ; if quotient is 0 no need to keep going
 0000013B  75 F0			jne   _convertLoop
 0000013D  8B CE			mov   ECX,  ESI
 0000013F  5E				pop   ESI						 ; ESI now holds if original number was positive or negative

				; check if the number if negative
 00000140  83 FE 00			cmp   ESI,0		
 00000143  79 04			jns   _reverseOutput
 00000145  B0 2D			mov   AL, 45					 ; 45 is dec code for ascii character 
 00000147  AA				stosb				  			 ; adding the negative sign
 00000148  41				inc   ECX						 ; increment ecx cause theres another character 

				; reverse the output since the number is current string for number is stored in reverse
 00000149			_reverseOutput:
 00000149  FD				std								 ; set std to go backward through the string
 0000014A  8D 75 EC			lea   ESI, pInputBuffer
 0000014D  03 F1			add   ESI, ECX					 ; the length of the string
 0000014F  83 EE 01			sub   ESI, 1					 ; point at the last byte
 00000152  8D 7D D7			lea	  EDI, pOutputBuffer

				; reverse the string loop
 00000155			_revLoop:
 00000155  FD				std								 ; moving backwards for the input string
 00000156  AC				lodsb
 00000157  FC				cld								 ; moving forwards for the output string
 00000158  AA				stosb
 00000159  E2 FA			loop  _revLoop

				; display the number
 0000015B			_displayNumber:
 0000015B  8D 55 D7			lea   EDX, pOutputBuffer
					mDispString EDX
 0000015E  52		     1		push  EDX		
 0000015F  8B D2	     1		mov   EDX, EDX 
 00000161  E8 00000000 E     1		call  WriteString
 00000166  5A		     1		pop   EDX		

				; cleanup the stack
 00000167			_cleanUp:
 00000167  5E				pop   ESI
 00000168  5B				pop   EBX
 00000169  58				pop   EAX
 0000016A  59				pop   ECX
 0000016B  5F				pop   EDI
 0000016C  C9		   *	    leave  
 0000016D  C2 0004			ret   4

 00000170			WriteVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Uses the mGetString macro to get user input, checks that the user has only
				; entered digits and checks the the number fits within an SDWORD, converts the string to an sdword
				;and then it stores in the correct position of the array.
				;
				; Preconditions: ValidNumerCount offset has been pushed, numArray offset has been pushed, numPrompt offset has been pushed, 
				; maximum # of characters user can enter has been pushed, errormessage offset for an invalid number entry has been pushed,
				; the offset for the line number has been puhshed
				;
				; Postconditions: Array now contains the valid input
				;
				; Receives:
				; [EBP +8]   = ValidNumberCount as an offset
				; [EBP + 12] = numArray as an offset
				; [EBP + 16] = numPrompt as an offset
				; [EBP + 20] = maximum number of characters that a user can enter as a value
				; [EBP + 24] = the offset for the invalid number error message
				; [EBP + 28] = the offset for the line number
				; [EBP + 32] = the offset for the tryAgain message
				;
				; returns: none
				; ---------------------------------------------------------------------------------

 00000170			ReadVal PROC	
				; valnumCount offset(8 last pushed);numArray(12),numPromptOffset(16),MaxChar by value)(20),mInputBufferOffset(24), LineNumOffset(28), tryAgain(32 first pushed)

				; declare local variablees
					LOCAL pSign:SDWORD 
					LOCAL pCharsRead:SDWORD 
					LOCAL pInputBuffer[20]:BYTE
					LOCAL pInputOffset:DWORD
					LOCAL pLineNumOffset:DWORD		; used for line counter
					LOCAL pLineDisp[2]:BYTE			; used to display the text ")"

				;preserve registers	
 00000170  55		   *	    push   ebp
 00000171  8B EC	   *	    mov    ebp, esp
 00000173  83 C4 D8	   *	    add    esp, 0FFFFFFD8h
 00000176  51				push  ECX						; will be used for string primitives later
 00000177  57				push  EDI						; the destination address for string primitives
 00000178  56				push  ESI						; the source address for string primitives
 00000179  50				push  EAX						; used in imul and mul
 0000017A  52				push  EDX						; used to write the strings
 0000017B  53				push  EBX						; operand for multiplication

				; setup pLineDisp
 0000017C  8D 7D DA			lea   EDI, pLineDisp
 0000017F  B0 29			mov   AL, 41					; 41 is ascii code for )
 00000181  AA				stosb
 00000182  B0 00			mov   AL, 0						; null terminator
 00000184  AA				stosb
					
 00000185  BB 00000001			mov   EBX,1
 0000018A  8B 55 1C			mov   EDX, [EBP + 28]			; memory that that holds the current number of lines
 0000018D  89 55 DC			mov   pLineNumOffset, EDX
					
				; move offset for pInputBuffer into pInputOffset
 00000190  8D 7D E4			lea   EDI, pInputBuffer
 00000193  89 7D E0			mov   pInputOffset,EDI			

				; 0 out the output buffer for the next number
 00000196			_zeroFillTheBuffer:					; I could have used dup 0 and a data declaration oops
 00000196  B8 00000000			mov   EAX, 0                    
 0000019B  8D 7D E4			lea   EDI, pInputBuffer
 0000019E  B9 00000014			mov   ECX, 20                   
 000001A3  F3/ AA			rep   stosb
 000001A5  8D 7D E4			lea   EDI, pInputBuffer

				; get a number from the user
 000001A8			_getNum:
 000001A8  8B 75 DC			mov   ESI, pLineNumOffset		; load line number offset
 000001AB  8B 1E			mov   EBX, [ESI]
 000001AD  53				push  EBX
 000001AE  E8 FFFFFF33			call  WriteVal
 000001B3  8D 5D DA			lea   EBX, pLineDisp
					mDispString EBX
 000001B6  52		     1		push  EDX		
 000001B7  8B D3	     1		mov   EDX, EBX 
 000001B9  E8 00000000 E     1		call  WriteString
 000001BE  5A		     1		pop   EDX		
 000001BF  8D 5D F8			lea	  EBX, pCharsRead			;cannot load into macro registers already used in macro
					mGetString [EBP +16], [EBP +20],pInputOffset,EBX 
 000001C2  52		     1		push  EDX						; offset for the prompt
 000001C3  51		     1		push  ECX						; maximum numbers of characteres that can be read
 000001C4  8B 55 10	     1	    mov   EDX, [EBP +16]		; prompt offset was pushed before calling proc
 000001C7  E8 00000000 E     1		call  WriteString
 000001CC  56		     1		push  ESI						; used for string primitives
 000001CD  57		     1		push  EDI						; used as destination address for input buffer
 000001CE  8B 4D 14	     1		mov   ECX, [EBP +20] 
 000001D1  50		     1		push  EAX
 000001D2  8B F3	     1		mov   ESI, EBX			; setup address to  store number of bytes read
 000001D4  B8 00000000	     1		mov   EAX, 0					; sto takes value of AL, so mov 0 into it
 000001D9  8B 7D E0	     1		mov   EDI, pInputOffset
 000001DC  F3/ AA	     1		rep   stosb						
 000001DE  8B 55 E0	     1		mov   EDX, pInputOffset			; move offset of inputBuffer into EDX
 000001E1  8B 4D 14	     1		mov   ECX, [EBP +20]				; set max # of characters
 000001E4  E8 00000000 E     1		call  ReadString
 000001E9  89 06	     1		mov   [ESI],EAX					
 000001EB  58		     1		pop   EAX
 000001EC  5F		     1		pop	  EDI
 000001ED  5E		     1		pop   ESI
 000001EE  59		     1		pop   ECX
 000001EF  5A		     1		pop   EDX				
 000001F0  EB 48			jmp   _getNumContinue

				; Get another nunmber from the user if numbered entered is invalid
 000001F2			_getRetryNum:
 000001F2  8B 75 DC			mov   ESI, pLineNumOffset
 000001F5  8B 1E			mov   EBX, [ESI]
 000001F7  53				push  EBX
 000001F8  E8 FFFFFEE9			call  WriteVal
 000001FD  8D 5D DA			lea   EBX, pLineDisp
					mDispString EBX
 00000200  52		     1		push  EDX		
 00000201  8B D3	     1		mov   EDX, EBX 
 00000203  E8 00000000 E     1		call  WriteString
 00000208  5A		     1		pop   EDX		
 00000209  8D 5D F8			lea	  EBX, pCharsRead
					mGetString [EBP +32], [EBP +20],pInputOffset,EBX ; we want a different error message after the first time! For bling
 0000020C  52		     1		push  EDX						; offset for the prompt
 0000020D  51		     1		push  ECX						; maximum numbers of characteres that can be read
 0000020E  8B 55 20	     1	    mov   EDX, [EBP +32]		; prompt offset was pushed before calling proc
 00000211  E8 00000000 E     1		call  WriteString
 00000216  56		     1		push  ESI						; used for string primitives
 00000217  57		     1		push  EDI						; used as destination address for input buffer
 00000218  8B 4D 14	     1		mov   ECX, [EBP +20] 
 0000021B  50		     1		push  EAX
 0000021C  8B F3	     1		mov   ESI, EBX			; setup address to  store number of bytes read
 0000021E  B8 00000000	     1		mov   EAX, 0					; sto takes value of AL, so mov 0 into it
 00000223  8B 7D E0	     1		mov   EDI, pInputOffset
 00000226  F3/ AA	     1		rep   stosb						
 00000228  8B 55 E0	     1		mov   EDX, pInputOffset			; move offset of inputBuffer into EDX
 0000022B  8B 4D 14	     1		mov   ECX, [EBP +20]				; set max # of characters
 0000022E  E8 00000000 E     1		call  ReadString
 00000233  89 06	     1		mov   [ESI],EAX					
 00000235  58		     1		pop   EAX
 00000236  5F		     1		pop	  EDI
 00000237  5E		     1		pop   ESI
 00000238  59		     1		pop   ECX
 00000239  5A		     1		pop   EDX				


 0000023A			_getNumContinue:
 0000023A  FF 06			inc   DWORD PTR [ESI]			; increment the number in memory at ESI that is  DWORD
 0000023C  8D 75 E4			lea   ESI, pInputBuffer
 0000023F  AC				lodsb							; load byte 

				; check if the user entered a + or - sign
 00000240  3C 2B			cmp   AL, 43					; check that user entered positive sign
 00000242  74 14			je    _plusSign
 00000244  3C 2D			cmp   AL, 45					; check that user entered negative sign
 00000246  74 20			je    _negSign
 00000248  8B 4D F8			mov   ECX, pCharsRead
 0000024B  BB 00000001			mov   EBX, 1				     ; if no sign is entered then the number is positive
 00000250  89 5D FC			mov   pSign, EBX
 00000253  8D 75 E4			lea   ESI, pInputBuffer
 00000256  EB 20			jmp   _validationSetup

				; what to do if there's a plus sign
 00000258			_plusSign:
 00000258  8B 4D F8			mov   ECX, pCharsRead
 0000025B  83 E9 01			sub   ECX, 1					 ; 1 less time to do the loop since we already took off the sign, avoid removing the null terminating 0
 0000025E  BB 00000001			mov   EBX, 1
					  ; setup for integer storage operation
 00000263  89 5D FC			mov   pSign, EBX
 00000266  EB 10			jmp   _validationSetup

				; what to do if there's a negative sign
 00000268			_negSign:
 00000268  8B 4D F8			mov   ECX, pCharsRead
 0000026B  83 E9 01			sub   ECX,  1					 ; 1 less time to do the loop since we already took off the sign, avoid removing the null terminating 0
 0000026E  BB FFFFFFFF			mov   EBX, -1
 00000273  89 5D FC			mov   pSign, EBX
 00000276  EB 00			jmp   _validationSetup

 00000278			_validationSetup:
 00000278  BA 00000000			mov   EDX, 0					
 0000027D  BB 00000000			mov   EBX, 0					 ; holds value of numInt
 00000282  BF 0000000A			mov   EDI, 10

				; check that the input was valid and fits with a 32 bit SDWORD
 00000287			_validationLoop:
 00000287  AC				lodsb							 ; load single byte from address pointed to by ESI and increment ESI
 00000288  3C 30			cmp   AL,  48					 ; 48 is the decimal value for 0
 0000028A  72 1E			jb    _invalidNum
 0000028C  3C 39			cmp   AL,  57				   	 ; 57 is the ascii decimal value for 9
 0000028E  77 1A			ja    _invalidNum
 00000290  2C 30			sub   AL,  48					 ; the lower level programming conversion, sub 48 aka 0
 00000292  0F B6 D0			movzx EDX, AL					 ; 0 extend AL and mov into EDX
 00000295  6B DB 0A			imul  EBX, 10
 00000298  70 10			jo    _invalidNum				 ; if an overflow occursion dring the number conversion the number is too big or too small!
 0000029A  03 DA			add   EBX, EDX
 0000029C  E2 E9			loop  _validationLoop

				; add the sign back onto the number
 0000029E  8B D3			mov   EDX,  EBX
 000002A0  8B 5D FC			mov   EBX,  pSign				 ; multiplying by 1(positive) or -1(negative)
 000002A3  0F AF D3			imul  EDX, EBX					 
 000002A6  8B DA			mov   EBX, EDX
 000002A8  EB 14			jmp   _validNum

				; if invalid number get another number!
 000002AA			_invalidNum:
					mDispString [EBP + 24]
 000002AA  52		     1		push  EDX		
 000002AB  8B 55 18	     1		mov   EDX, [EBP + 24] 
 000002AE  E8 00000000 E     1		call  WriteString
 000002B3  5A		     1		pop   EDX		
 000002B4  E8 00000000 E		call  CrLf
 000002B9  E9 FFFFFF34			jmp   _getRetryNum				 

				; the number entered was valid so store it
 000002BE			_validNum:
 000002BE  8B 75 08			mov   ESI,   [EBP + 8]			 ; num count by value
 000002C1  BB 00000004			mov   EBX,   TYPE SDWORD
 000002C6  0F AF DE			imul  EBX,   ESI				 ; generating the offset
 000002C9  8B 7D 0C			mov   EDI,   [EBP + 12]			 ; now holds the memory address of the array, the base
 000002CC  03 FB			add   EDI,   EBX				 ; adding offset to the base
 000002CE  89 17			mov   [EDI], EDX				 ; edx holds the result num

				; cleanup and fix stack pointer
 000002D0  5B				pop   EBX
 000002D1  5A				pop   EDX
 000002D2  58				pop   EAX
 000002D3  5E				pop   ESI	
 000002D4  5F				pop   EDI
 000002D5  59				pop   ECX
 000002D6  C9		   *	    leave  
 000002D7  C2 001C			ret   28

 000002DA			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: NumArrayDisplay
				;
				; Uses the mDispString macro to display the title for the array.
				; It then uses WriteVal to Write each number as a string to the display.
				;
				; Preconditions: ValidNumberCount offset has been pushed, numArray offset has been pushed, numArrayDisp offset has been pushed
				;
				; Postconditions: The number array has been written to the screen
				;
				; Receives:
				; [EBP +8] = ValidNumberCount as an offset
				; [EBP + 12] = numArray as an offset
				; [EBP + 16] = numArrayDisp (the title) as an offset
				;
				; returns: none
				; ---------------------------------------------------------------------------------
 000002DA			NumArrayDisplay Proc

				; declare local variables 			; valnumCount offset(8 last pushed);numArray(12),numArrayDispOffset(16, first pushed)
					LOCAL pItemDisp[3]:BYTE			; used to display the text ", "
					LOCAL pCurrentNum:SDWORD		; the current number to be written, passed to WriteVal

				;preserve registers
 000002DA  55		   *	    push   ebp
 000002DB  8B EC	   *	    mov    ebp, esp
 000002DD  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000002E0  57				push  EDI						; used to store address that sotres the text ", "
 000002E1  56				push  ESI						; used as the source address to display the arrax
 000002E2  50				push  EAX						; used to initialize pItemDisp
 000002E3  51				push  ECX						; used as the counter for how many times to display a number
 000002E4  53				push  EBX						; used to store offset that is past to mDispString

				; setup pItemDisp
 000002E5  8D 7D FD			lea   EDI, pItemDisp
 000002E8  B0 2C			mov   AL, 44					; comma
 000002EA  AA				stosb
 000002EB  B0 20			mov   AL, 32					; space
 000002ED  AA				stosb
 000002EE  B0 00			mov   AL, 0						; null terminator
 000002F0  AA				stosb
					mDispString [EBP + 16]
 000002F1  52		     1		push  EDX		
 000002F2  8B 55 10	     1		mov   EDX, [EBP + 16] 
 000002F5  E8 00000000 E     1		call  WriteString
 000002FA  5A		     1		pop   EDX		

				; display array Setup
 000002FB			_dispArraySetup:
 000002FB  8B 4D 08			mov   ECX, [EBP +8]				; initialize the counter
 000002FE  8B 75 0C			mov   ESI, [EBP +12]			; the address of the array

				; display the array
 00000301			_dispArrayLoop:
 00000301  8B 1E			mov   EBX, [ESI]
 00000303  89 5D F8			mov   pCurrentNum, EBX
 00000306  FF 75 F8			push  pCurrentNum
 00000309  E8 FFFFFDD8			call  WriteVal					; write the next 
 0000030E  83 F9 01			cmp   ECX, 1
 00000311  74 11			jz    _end						; we don't want a comma written after the last number!
 00000313  83 C6 04			add   ESI, 4					; point to the next value
 00000316  8D 5D FD			lea   EBX, pItemDisp
					mDispString EBX
 00000319  52		     1		push  EDX		
 0000031A  8B D3	     1		mov   EDX, EBX 
 0000031C  E8 00000000 E     1		call  WriteString
 00000321  5A		     1		pop   EDX		
 00000322  E2 DD			loop  _dispArrayLoop

				; line return
 00000324			_end:
 00000324  E8 00000000 E		call  CrLf
 00000329  E8 00000000 E		call  CrLf

				; clean up and restore registers
 0000032E  59				pop   ECX
 0000032F  58				pop   EAX
 00000330  5E				pop   ESI
 00000331  5F				pop   EDI
 00000332  C9		   *	    leave  
 00000333  C2 000C			ret   12

 00000336			numArrayDisplay ENDP

				; ---------------------------------------------------------------------------------
				; Name: CalculateSumAndDisplay
				;
				; calculates the Sum of the numbers in the array, displays the title for the sum and 
				; then writes the sum as a value using WriteVal
				;
				; Preconditions: ValidNumberCount offset has been pushed, numArray offset has been pushed, sumDisp offset has been pushed 
				;
				; Postconditions: The sum string and number have been written to the screen.
				;
				; Receives:
				; [EBP +8] = ValidNumberCount as an offset ( the number of items in the array)
				; [EBP + 12] = numArray as an offset
				; [EBP + 16] = sumDisp (the title or string to be written) as an offset
				;
				; returns: none
				; ---------------------------------------------------------------------------------

 00000336			CalculateSumAndDisplay Proc

				;declare local variables									; valnumCount offset(8);numArray(12),sumDispOffset(16)
					LOCAL pRunningSum:SDWORD		; used to store the sum of the numbers.

				;preserve registers
 00000336  55		   *	    push   ebp
 00000337  8B EC	   *	    mov    ebp, esp
 00000339  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000033C  57				push  EDI						; used to initialize pRunningSum
 0000033D  56				push  ESI						; used as the offset for the array
 0000033E  50				push  EAX						; used to move 0  into pRunningSum
 0000033F  51				push  ECX						; used as the counter for how many times to loop(based on the number of items in the array)

				; initialize pRunningSum to 0
 00000340  8D 7D FC			lea   EDI, pRunningSum
 00000343  B8 00000000			mov   EAX, 0
 00000348  89 07			mov   [EDI],EAX					

				; write the result string text to the screen
 0000034A			_dispResultText:
					mDispString [EBP + 16]
 0000034A  52		     1		push  EDX		
 0000034B  8B 55 10	     1		mov   EDX, [EBP + 16] 
 0000034E  E8 00000000 E     1		call  WriteString
 00000353  5A		     1		pop   EDX		
 00000354  8B 4D 08			mov   ECX, [EBP +8]
 00000357  8B 75 0C			mov   ESI, [EBP +12] 
 0000035A  8B 45 FC			mov   EAX, pRunningSum

				; calculate the sum
 0000035D			_calcTotal:
 0000035D  03 06			add   EAX, [ESI]
 0000035F  83 C6 04			add   ESI, 4
 00000362  E2 F9			loop _calcTotal

				;display the total
 00000364			_displayTotal:
 00000364  89 45 FC			mov   pRunningSum, EAX
 00000367  FF 75 FC			push  pRunningSum
 0000036A  E8 FFFFFD77			call  WriteVal
 0000036F  E8 00000000 E		call  CrLf

				; restore registers and cleanup
 00000374  59				pop   ECX
 00000375  58				pop   EAX
 00000376  5E				pop   ESI
 00000377  5F				pop   EDI
 00000378  C9		   *	    leave  
 00000379  C2 000C			ret   12
 0000037C			CalculateSumAndDisplay ENDP

				; ---------------------------------------------------------------------------------
				; Name: CalculateAverageAndDisplay
				;
				; calculates the Sum of the numbers in the array,divides by the number of items in the array to get the average
				; displays the title for the truncated  average and then writes the average as a value using WriteVal
				;
				; Preconditions: ValidNumberCount offset has been pushed, numArray offset has been pushed, sumDisp offset has been pushed 
				;
				; Postconditions: the average string and the average have been written to the screen
				;
				; Receives:
				; [EBP +8] = ValidNumberCount as an offset ( the number of items in the array)
				; [EBP + 12] = numArray as an offset
				; [EBP + 16] = averageDisp (the title or string to be written) as an offset
				;
				; returns: none
				; ---------------------------------------------------------------------------------

 0000037C			CalcAverageAndDisplay  Proc

				;declare local variables
					LOCAL pSum:SDWORD				; stores the sum of all the numbers in the array
					LOCAL pAverage:SDWORD			; stores the average of the all the numbers in the array

				;preserve registers
 0000037C  55		   *	    push   ebp
 0000037D  8B EC	   *	    mov    ebp, esp
 0000037F  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000382  57				push  EDI						; the memory offset for the destination address
 00000383  56				push  ESI						; holds the address for the current item in the array
 00000384  50				push  EAX						; used to store the sum and for the quotient in division
 00000385  51				push  ECX						; the number of times to sum the valid based on the number of items in the array

				; initialize pSum to 0
 00000386  8D 7D FC			lea   EDI, pSum			
 00000389  B8 00000000			mov   EAX, 0
 0000038E  89 07			mov   [EDI],EAX					\

				; display the title for the average
 00000390			_dispAverageText:
					mDispString [EBP + 16]			
 00000390  52		     1		push  EDX		
 00000391  8B 55 10	     1		mov   EDX, [EBP + 16] 
 00000394  E8 00000000 E     1		call  WriteString
 00000399  5A		     1		pop   EDX		
 0000039A  8B 4D 08			mov   ECX, [EBP +8]
 0000039D  8B 75 0C			mov   ESI, [EBP +12] 
 000003A0  8B 45 FC			mov   EAX, pSum
					
				; get the total for the items in the array
 000003A3			_calcTotal:
 000003A3  03 06			add   EAX, [ESI]
 000003A5  83 C6 04			add   ESI, 4
 000003A8  E2 F9			loop  _calcTotal
 000003AA  89 45 FC			mov   pSum, EAX

				;calculate the average
 000003AD			_calcAverage:
 000003AD  8B 5D 08			mov   EBX, [EBP + 8]			; get the number of items in the array
 000003B0  8B 45 FC			mov   EAX, pSum			
 000003B3  99				cdq
 000003B4  F7 FB			idiv  EBX					    ; divide sum of the numbers in the array by the number of items
 000003B6  89 45 F8			mov   pAverage, EAX				; store result
					
				; write the average
 000003B9  FF 75 F8			push  pAverage
 000003BC  E8 FFFFFD25			call  WriteVal					
 000003C1  E8 00000000 E		call  CrLf

				; cleanup an restore registers
 000003C6  59				pop   ECX
 000003C7  58				pop   EAX
 000003C8  5E				pop   ESI
 000003C9  5F				pop   EDI
 000003CA  C9		   *	    leave  
 000003CB  C2 000C			ret   12
 000003CE			CalcAverageAndDisplay  ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30154.0	    06/12/24 15:34:58
Project_6 (Proj6_bradsean.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mDispString  . . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000465 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003CE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcAverageAndDisplay  . . . . .	P Near	 0000037C _TEXT	Length= 00000052 Public STDCALL
  pSum . . . . . . . . . . . . .	DWord	 bp - 00000004
  pAverage . . . . . . . . . . .	DWord	 bp - 00000008
  _dispAverageText . . . . . . .	L Near	 00000390 _TEXT	
  _calcTotal . . . . . . . . . .	L Near	 000003A3 _TEXT	
  _calcAverage . . . . . . . . .	L Near	 000003AD _TEXT	
CalculateSumAndDisplay . . . . .	P Near	 00000336 _TEXT	Length= 00000046 Public STDCALL
  pRunningSum  . . . . . . . . .	DWord	 bp - 00000004
  _dispResultText  . . . . . . .	L Near	 0000034A _TEXT	
  _calcTotal . . . . . . . . . .	L Near	 0000035D _TEXT	
  _displayTotal  . . . . . . . .	L Near	 00000364 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NumArrayDisplay  . . . . . . . .	P Near	 000002DA _TEXT	Length= 0000005C Public STDCALL
  pItemDisp  . . . . . . . . . .	Byte	 bp - 00000003
  pCurrentNum  . . . . . . . . .	DWord	 bp - 00000008
  _dispArraySetup  . . . . . . .	L Near	 000002FB _TEXT	
  _dispArrayLoop . . . . . . . .	L Near	 00000301 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000324 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000170 _TEXT	Length= 0000016A Public STDCALL
  pSign  . . . . . . . . . . . .	DWord	 bp - 00000004
  pCharsRead . . . . . . . . . .	DWord	 bp - 00000008
  pInputBuffer . . . . . . . . .	Byte	 bp - 0000001C
  pInputOffset . . . . . . . . .	DWord	 bp - 00000020
  pLineNumOffset . . . . . . . .	DWord	 bp - 00000024
  pLineDisp  . . . . . . . . . .	Byte	 bp - 00000026
  _zeroFillTheBuffer . . . . . .	L Near	 00000196 _TEXT	
  _getNum  . . . . . . . . . . .	L Near	 000001A8 _TEXT	
  _getRetryNum . . . . . . . . .	L Near	 000001F2 _TEXT	
  _getNumContinue  . . . . . . .	L Near	 0000023A _TEXT	
  _plusSign  . . . . . . . . . .	L Near	 00000258 _TEXT	
  _negSign . . . . . . . . . . .	L Near	 00000268 _TEXT	
  _validationSetup . . . . . . .	L Near	 00000278 _TEXT	
  _validationLoop  . . . . . . .	L Near	 00000287 _TEXT	
  _invalidNum  . . . . . . . . .	L Near	 000002AA _TEXT	
  _validNum  . . . . . . . . . .	L Near	 000002BE _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000000E6 _TEXT	Length= 0000008A Public STDCALL
  pInputBuffer . . . . . . . . .	Byte	 bp - 00000014
  pOutputBuffer  . . . . . . . .	Byte	 bp - 00000029
  _zeroFillTheBuffers  . . . . .	L Near	 000000F6 _TEXT	
  _setupConvertIntToAscii  . . .	L Near	 0000010F _TEXT	
  _divSetupCont  . . . . . . . .	L Near	 0000011F _TEXT	
  _convertLoop . . . . . . . . .	L Near	 0000012D _TEXT	
  _reverseOutput . . . . . . . .	L Near	 00000149 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000155 _TEXT	
  _displayNumber . . . . . . . .	L Near	 0000015B _TEXT	
  _cleanUp . . . . . . . . . . .	L Near	 00000167 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E6 Public STDCALL
  _getNumbersLoop  . . . . . . .	L Near	 0000002A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averageDisp  . . . . . . . . . .	Byte	 000003C5 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charsInANum  . . . . . . . . . .	DWord	 000000F0 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraC1  . . . . . . . . . . . .	Byte	 000002EF _DATA	
finalBye . . . . . . . . . . . .	Byte	 000003E8 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineNum  . . . . . . . . . . . .	DWord	 000003E4 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxChar  . . . . . . . . . . . .	DWord	 00000118 _DATA	
numArrDisp . . . . . . . . . . .	Byte	 0000037E _DATA	
numArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
numError . . . . . . . . . . . .	Byte	 00000289 _DATA	
numPrompt  . . . . . . . . . . .	Byte	 0000026A _DATA	
numStrArray  . . . . . . . . . .	Byte	 00000028 _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000120 _DATA	
promptOne  . . . . . . . . . . .	Byte	 00000175 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumDisp  . . . . . . . . . . . .	Byte	 000003A4 _DATA	
tryAgain . . . . . . . . . . . .	Byte	 000002D0 _DATA	
valNumCount  . . . . . . . . . .	DWord	 0000011C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
